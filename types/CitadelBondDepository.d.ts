/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CitadelBondDepositoryInterface extends ethers.utils.Interface {
  functions: {
    "IDs(uint256)": FunctionFragment;
    "addBond(address,address,uint256,bool)": FunctionFragment;
    "authority()": FunctionFragment;
    "bondInfo(uint256)": FunctionFragment;
    "bondPrice(uint256)": FunctionFragment;
    "bondPriceInUSD(uint256)": FunctionFragment;
    "bondTerms(uint256)": FunctionFragment;
    "bonds(uint256)": FunctionFragment;
    "currentDebt(uint256)": FunctionFragment;
    "debtDecay(uint256)": FunctionFragment;
    "debtRatio(uint256)": FunctionFragment;
    "deposit(uint256,uint256,address,uint256,address)": FunctionFragment;
    "deprecateBond(uint256)": FunctionFragment;
    "maxPayout(uint256)": FunctionFragment;
    "payoutFor(uint256,uint256)": FunctionFragment;
    "payoutForAmount(uint256,uint256)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setTeller(address)": FunctionFragment;
    "setTerms(uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "standardizedDebtRatio(uint256)": FunctionFragment;
    "teller()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "IDs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "addBond",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bondInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondPriceInUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondTerms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bonds", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "currentDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payoutForAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTeller", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTerms",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "standardizedDebtRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "teller", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IDs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondPriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deprecateBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTeller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTerms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "standardizedDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teller", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "CreateBond(uint256,uint256,uint256,uint256)": EventFragment;
    "afterBond(uint256,uint256,uint256,uint256)": EventFragment;
    "beforeBond(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "afterBond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "beforeBond"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<
  [string] & { authority: string }
>;

export type CreateBondEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    index: BigNumber;
    amount: BigNumber;
    payout: BigNumber;
    expires: BigNumber;
  }
>;

export type afterBondEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    index: BigNumber;
    price: BigNumber;
    internalPrice: BigNumber;
    debtRatio: BigNumber;
  }
>;

export type beforeBondEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    index: BigNumber;
    price: BigNumber;
    internalPrice: BigNumber;
    debtRatio: BigNumber;
  }
>;

export class CitadelBondDepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CitadelBondDepositoryInterface;

  functions: {
    IDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    addBond(
      _principal: string,
      _calculator: string,
      _capacity: BigNumberish,
      _capacityIsPayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    bondInfo(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        principal_: string;
        calculator_: string;
        totalDebt_: BigNumber;
        lastBondCreatedAt_: BigNumber;
      }
    >;

    bondPrice(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price_: BigNumber }>;

    bondPriceInUSD(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price_: BigNumber }>;

    bondTerms(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        controlVariable_: BigNumber;
        vestingTerm_: BigNumber;
        minimumPrice_: BigNumber;
        maxPayout_: BigNumber;
        maxDebt_: BigNumber;
      }
    >;

    bonds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          controlVariable: BigNumber;
          fixedTerm: boolean;
          vestingTerm: BigNumber;
          expiration: BigNumber;
          conclusion: BigNumber;
          minimumPrice: BigNumber;
          maxPayout: BigNumber;
          maxDebt: BigNumber;
        },
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        principal: string;
        calculator: string;
        terms: [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          controlVariable: BigNumber;
          fixedTerm: boolean;
          vestingTerm: BigNumber;
          expiration: BigNumber;
          conclusion: BigNumber;
          minimumPrice: BigNumber;
          maxPayout: BigNumber;
          maxDebt: BigNumber;
        };
        termsSet: boolean;
        capacity: BigNumber;
        capacityIsPayout: boolean;
        totalDebt: BigNumber;
        lastDecay: BigNumber;
      }
    >;

    currentDebt(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtDecay(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { decay_: BigNumber }>;

    debtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debtRatio_: BigNumber }>;

    deposit(
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _depositor: string,
      _BID: BigNumberish,
      _feo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecateBond(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPayout(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payoutFor(
      _value: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payoutForAmount(
      _amount: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTeller(
      _teller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTerms(
      _id: BigNumberish,
      _controlVariable: BigNumberish,
      _fixedTerm: boolean,
      _vestingTerm: BigNumberish,
      _expiration: BigNumberish,
      _conclusion: BigNumberish,
      _minimumPrice: BigNumberish,
      _maxPayout: BigNumberish,
      _maxDebt: BigNumberish,
      _initialDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    standardizedDebtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    teller(overrides?: CallOverrides): Promise<[string]>;
  };

  IDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addBond(
    _principal: string,
    _calculator: string,
    _capacity: BigNumberish,
    _capacityIsPayout: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  bondInfo(
    _BID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      principal_: string;
      calculator_: string;
      totalDebt_: BigNumber;
      lastBondCreatedAt_: BigNumber;
    }
  >;

  bondPrice(_BID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  bondPriceInUSD(
    _BID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondTerms(
    _BID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      controlVariable_: BigNumber;
      vestingTerm_: BigNumber;
      minimumPrice_: BigNumber;
      maxPayout_: BigNumber;
      maxDebt_: BigNumber;
    }
  >;

  bonds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      [
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        controlVariable: BigNumber;
        fixedTerm: boolean;
        vestingTerm: BigNumber;
        expiration: BigNumber;
        conclusion: BigNumber;
        minimumPrice: BigNumber;
        maxPayout: BigNumber;
        maxDebt: BigNumber;
      },
      boolean,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      principal: string;
      calculator: string;
      terms: [
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        controlVariable: BigNumber;
        fixedTerm: boolean;
        vestingTerm: BigNumber;
        expiration: BigNumber;
        conclusion: BigNumber;
        minimumPrice: BigNumber;
        maxPayout: BigNumber;
        maxDebt: BigNumber;
      };
      termsSet: boolean;
      capacity: BigNumber;
      capacityIsPayout: boolean;
      totalDebt: BigNumber;
      lastDecay: BigNumber;
    }
  >;

  currentDebt(
    _BID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtDecay(_BID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  debtRatio(_BID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    _maxPrice: BigNumberish,
    _depositor: string,
    _BID: BigNumberish,
    _feo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecateBond(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPayout(_BID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  payoutFor(
    _value: BigNumberish,
    _BID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payoutForAmount(
    _amount: BigNumberish,
    _BID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTeller(
    _teller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTerms(
    _id: BigNumberish,
    _controlVariable: BigNumberish,
    _fixedTerm: boolean,
    _vestingTerm: BigNumberish,
    _expiration: BigNumberish,
    _conclusion: BigNumberish,
    _minimumPrice: BigNumberish,
    _maxPayout: BigNumberish,
    _maxDebt: BigNumberish,
    _initialDebt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  standardizedDebtRatio(
    _BID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  teller(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addBond(
      _principal: string,
      _calculator: string,
      _capacity: BigNumberish,
      _capacityIsPayout: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<string>;

    bondInfo(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        principal_: string;
        calculator_: string;
        totalDebt_: BigNumber;
        lastBondCreatedAt_: BigNumber;
      }
    >;

    bondPrice(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondPriceInUSD(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondTerms(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        controlVariable_: BigNumber;
        vestingTerm_: BigNumber;
        minimumPrice_: BigNumber;
        maxPayout_: BigNumber;
        maxDebt_: BigNumber;
      }
    >;

    bonds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          controlVariable: BigNumber;
          fixedTerm: boolean;
          vestingTerm: BigNumber;
          expiration: BigNumber;
          conclusion: BigNumber;
          minimumPrice: BigNumber;
          maxPayout: BigNumber;
          maxDebt: BigNumber;
        },
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        principal: string;
        calculator: string;
        terms: [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          controlVariable: BigNumber;
          fixedTerm: boolean;
          vestingTerm: BigNumber;
          expiration: BigNumber;
          conclusion: BigNumber;
          minimumPrice: BigNumber;
          maxPayout: BigNumber;
          maxDebt: BigNumber;
        };
        termsSet: boolean;
        capacity: BigNumber;
        capacityIsPayout: boolean;
        totalDebt: BigNumber;
        lastDecay: BigNumber;
      }
    >;

    currentDebt(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtDecay(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _depositor: string,
      _BID: BigNumberish,
      _feo: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    deprecateBond(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    maxPayout(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutFor(
      _value: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutForAmount(
      _amount: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeller(_teller: string, overrides?: CallOverrides): Promise<void>;

    setTerms(
      _id: BigNumberish,
      _controlVariable: BigNumberish,
      _fixedTerm: boolean,
      _vestingTerm: BigNumberish,
      _expiration: BigNumberish,
      _conclusion: BigNumberish,
      _minimumPrice: BigNumberish,
      _maxPayout: BigNumberish,
      _maxDebt: BigNumberish,
      _initialDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    standardizedDebtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    teller(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuthorityUpdated(address)"(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    AuthorityUpdated(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    "CreateBond(uint256,uint256,uint256,uint256)"(
      index?: null,
      amount?: null,
      payout?: null,
      expires?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        index: BigNumber;
        amount: BigNumber;
        payout: BigNumber;
        expires: BigNumber;
      }
    >;

    CreateBond(
      index?: null,
      amount?: null,
      payout?: null,
      expires?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        index: BigNumber;
        amount: BigNumber;
        payout: BigNumber;
        expires: BigNumber;
      }
    >;

    "afterBond(uint256,uint256,uint256,uint256)"(
      index?: null,
      price?: null,
      internalPrice?: null,
      debtRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        index: BigNumber;
        price: BigNumber;
        internalPrice: BigNumber;
        debtRatio: BigNumber;
      }
    >;

    afterBond(
      index?: null,
      price?: null,
      internalPrice?: null,
      debtRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        index: BigNumber;
        price: BigNumber;
        internalPrice: BigNumber;
        debtRatio: BigNumber;
      }
    >;

    "beforeBond(uint256,uint256,uint256,uint256)"(
      index?: null,
      price?: null,
      internalPrice?: null,
      debtRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        index: BigNumber;
        price: BigNumber;
        internalPrice: BigNumber;
        debtRatio: BigNumber;
      }
    >;

    beforeBond(
      index?: null,
      price?: null,
      internalPrice?: null,
      debtRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        index: BigNumber;
        price: BigNumber;
        internalPrice: BigNumber;
        debtRatio: BigNumber;
      }
    >;
  };

  estimateGas: {
    IDs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addBond(
      _principal: string,
      _calculator: string,
      _capacity: BigNumberish,
      _capacityIsPayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    bondInfo(_BID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bondPrice(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondPriceInUSD(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondTerms(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtDecay(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _depositor: string,
      _BID: BigNumberish,
      _feo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecateBond(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPayout(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutFor(
      _value: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payoutForAmount(
      _amount: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTeller(
      _teller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTerms(
      _id: BigNumberish,
      _controlVariable: BigNumberish,
      _fixedTerm: boolean,
      _vestingTerm: BigNumberish,
      _expiration: BigNumberish,
      _conclusion: BigNumberish,
      _minimumPrice: BigNumberish,
      _maxPayout: BigNumberish,
      _maxDebt: BigNumberish,
      _initialDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    standardizedDebtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    teller(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IDs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBond(
      _principal: string,
      _calculator: string,
      _capacity: BigNumberish,
      _capacityIsPayout: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondInfo(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondPrice(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondPriceInUSD(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondTerms(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDebt(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtDecay(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _maxPrice: BigNumberish,
      _depositor: string,
      _BID: BigNumberish,
      _feo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecateBond(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPayout(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutFor(
      _value: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payoutForAmount(
      _amount: BigNumberish,
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTeller(
      _teller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTerms(
      _id: BigNumberish,
      _controlVariable: BigNumberish,
      _fixedTerm: boolean,
      _vestingTerm: BigNumberish,
      _expiration: BigNumberish,
      _conclusion: BigNumberish,
      _minimumPrice: BigNumberish,
      _maxPayout: BigNumberish,
      _maxDebt: BigNumberish,
      _initialDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    standardizedDebtRatio(
      _BID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    teller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
