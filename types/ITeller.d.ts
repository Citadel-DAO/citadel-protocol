/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITellerInterface extends ethers.utils.Interface {
  functions: {
    "getReward()": FunctionFragment;
    "newBond(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "pendingFor(address,uint256)": FunctionFragment;
    "pendingForIndexes(address,uint256[])": FunctionFragment;
    "percentVestedFor(address,uint256)": FunctionFragment;
    "redeem(address,uint256[])": FunctionFragment;
    "redeemAll(address)": FunctionFragment;
    "setFEReward(uint256)": FunctionFragment;
    "totalPendingFor(address)": FunctionFragment;
    "updateIndexesFor(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newBond",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingForIndexes",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "percentVestedFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "redeemAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFEReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPendingFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIndexesFor",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingForIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentVestedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFEReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPendingFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIndexesFor",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITeller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITellerInterface;

  functions: {
    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newBond(
      _bonder: string,
      _principal: string,
      _principalPaid: BigNumberish,
      _payout: BigNumberish,
      _expires: BigNumberish,
      _feo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingForIndexes(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending_: BigNumber }>;

    percentVestedFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { percentVested_: BigNumber }>;

    redeem(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAll(
      _bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFEReward(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalPendingFor(
      _bonder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending_: BigNumber }>;

    updateIndexesFor(
      _bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newBond(
    _bonder: string,
    _principal: string,
    _principalPaid: BigNumberish,
    _payout: BigNumberish,
    _expires: BigNumberish,
    _feo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingFor(
    _bonder: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingForIndexes(
    _bonder: string,
    _indexes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  percentVestedFor(
    _bonder: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    _bonder: string,
    _indexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAll(
    _bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFEReward(
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalPendingFor(
    _bonder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateIndexesFor(
    _bonder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getReward(overrides?: CallOverrides): Promise<void>;

    newBond(
      _bonder: string,
      _principal: string,
      _principalPaid: BigNumberish,
      _payout: BigNumberish,
      _expires: BigNumberish,
      _feo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingForIndexes(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentVestedFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemAll(_bonder: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFEReward(reward: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalPendingFor(
      _bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateIndexesFor(_bonder: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newBond(
      _bonder: string,
      _principal: string,
      _principalPaid: BigNumberish,
      _payout: BigNumberish,
      _expires: BigNumberish,
      _feo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingForIndexes(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentVestedFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAll(
      _bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFEReward(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalPendingFor(
      _bonder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateIndexesFor(
      _bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newBond(
      _bonder: string,
      _principal: string,
      _principalPaid: BigNumberish,
      _payout: BigNumberish,
      _expires: BigNumberish,
      _feo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingForIndexes(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    percentVestedFor(
      _bonder: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _bonder: string,
      _indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAll(
      _bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFEReward(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalPendingFor(
      _bonder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateIndexesFor(
      _bonder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
